"""
GBIFOccurrencesLib

This file was automatically generated by APIMATIC BETA v2.0 on 10/29/2015
"""

class OccurrenceIssueEnum(object):

    """Implementation of the 'OccurrenceIssue' enum.

    An enumeration of validation rules for single occurrence records.

    Attributes:
        BASIS_OF_RECORD_INVALID: The given basis of record is impossible to
            interpret or seriously different from the recommended vocabulary.
        CONTINENT_COUNTRY_MISMATCH: The interpreted continent and country do
            not match up.
        CONTINENT_DERIVED_FROM_COORDINATES: The interpreted continent is based
            on the coordinates, not the verbatim string information.
        CONTINENT_INVALID: Uninterpretable continent values found.
        COORDINATE_INVALID: Coordinate value given in some form but GBIF is
            unable to interpret it.
        COORDINATE_OUT_OF_RANGE: Coordinate has invalid lat/lon values out of
            their decimal max range.
        COORDINATE_REPROJECTED: The original coordinate was successfully
            reprojected from a different geodetic datum to WGS84.
        COORDINATE_REPROJECTION_FAILED: The given decimal latitude and
            longitude could not be reprojected to WGS84 based on the provided
            datum.
        COORDINATE_REPROJECTION_SUSPICIOUS: Indicates successful coordinate
            reprojection according to provided datum, but which results in a
            datum shift larger than 0.1 decimal degrees.
        COORDINATE_ROUNDED: Original coordinate modified by rounding to 5
            decimals.
        COUNTRY_COORDINATE_MISMATCH: The interpreted occurrence coordinates
            fall outside of the indicated country.
        COUNTRY_DERIVED_FROM_COORDINATES: The interpreted country is based on
            the coordinates, not the verbatim string information.
        COUNTRY_INVALID: Uninterpretable country values found.
        COUNTRY_MISMATCH: Interpreted country for dwc:country and
            dwc:countryCode contradict each other.
        DEPTH_MIN_MAX_SWAPPED: Set if supplied min>max
        DEPTH_NON_NUMERIC: Set if depth is a non numeric value
        DEPTH_NOT_METRIC: Set if supplied depth is not given in the metric
            system, for example using feet instead of meters
        DEPTH_UNLIKELY: Set if depth is larger than 11.000m or negative.
        ELEVATION_MIN_MAX_SWAPPED: Set if supplied min > max elevation
        ELEVATION_NON_NUMERIC: Set if elevation is a non numeric value
        ELEVATION_NOT_METRIC: Set if supplied elevation is not given in the
            metric system, for example using feet instead of meters
        ELEVATION_UNLIKELY: Set if elevation is above the troposphere (17km)
            or below 11km (Mariana Trench).
        GEODETIC_DATUM_ASSUMED_WGS84: Indicating that the interpreted
            coordinates assume they are based on WGS84 datum as the datum was
            either not indicated or interpretable.
        GEODETIC_DATUM_INVALID: The geodetic datum given could not be
            interpreted.
        IDENTIFIED_DATE_INVALID: The date given for dwc:dateIdentified is
            invalid and cant be interpreted at all.
        IDENTIFIED_DATE_UNLIKELY: The date given for dwc:dateIdentified is in
            the future or before Linnean times (1700).
        INTERPRETATION_ERROR: An error occurred during interpretation, leaving
            the record interpretion incomplete.
        MODIFIED_DATE_INVALID: A (partial) invalid date is given for
            dc:modified, such as a non existing date, invalid zero month,
            etc.
        MODIFIED_DATE_UNLIKELY: The date given for dc:modified is in the
            future or predates unix time (1970).
        MULTIMEDIA_DATE_INVALID: An invalid date is given for dc:created of a
            multimedia object.
        MULTIMEDIA_URI_INVALID: An invalid uri is given for a multimedia
            object.
        PRESUMED_NEGATED_LATITUDE: Latitude appears to be negated, e.g.
        PRESUMED_NEGATED_LONGITUDE: Longitude appears to be negated, e.g.
        PRESUMED_SWAPPED_COORDINATE: Latitude and longitude appear to be
            swapped.
        RECORDED_DATE_INVALID: A (partial) invalid date is given, such as a
            non existing date, invalid zero month, etc.
        RECORDED_DATE_MISMATCH: The recording date specified as the eventDate
            string and the individual year, month, day are contradicting.
        RECORDED_DATE_UNLIKELY: The recording date is highly unlikely, falling
            either into the future or represents a very old date before 1600
            that predates modern taxonomy.
        REFERENCES_URI_INVALID: An invalid uri is given for dc:references.
        TAXON_MATCH_FUZZY: Matching to the taxonomic backbone can only be done
            using a fuzzy, non exact match.
        TAXON_MATCH_HIGHERRANK: Matching to the taxonomic backbone can only be
            done on a higher rank and not the scientific name.
        TAXON_MATCH_NONE: Matching to the taxonomic backbone cannot be done
            cause there was no match at all or several matches with too little
            information to keep them apart (homonyms).
        TYPE_STATUS_INVALID: The given type status is impossible to interpret
            or seriously different from the recommended vocabulary.
        ZERO_COORDINATE: Coordinate is the exact 0/0 coordinate, often
            indicating a bad null coordinate.

    """

    BASIS_OF_RECORD_INVALID = "BASIS_OF_RECORD_INVALID"

    CONTINENT_COUNTRY_MISMATCH = "CONTINENT_COUNTRY_MISMATCH"

    CONTINENT_DERIVED_FROM_COORDINATES = "CONTINENT_DERIVED_FROM_COORDINATES"

    CONTINENT_INVALID = "CONTINENT_INVALID"

    COORDINATE_INVALID = "COORDINATE_INVALID"

    COORDINATE_OUT_OF_RANGE = "COORDINATE_OUT_OF_RANGE"

    COORDINATE_REPROJECTED = "COORDINATE_REPROJECTED"

    COORDINATE_REPROJECTION_FAILED = "COORDINATE_REPROJECTION_FAILED"

    COORDINATE_REPROJECTION_SUSPICIOUS = "COORDINATE_REPROJECTION_SUSPICIOUS"

    COORDINATE_ROUNDED = "COORDINATE_ROUNDED"

    COUNTRY_COORDINATE_MISMATCH = "COUNTRY_COORDINATE_MISMATCH"

    COUNTRY_DERIVED_FROM_COORDINATES = "COUNTRY_DERIVED_FROM_COORDINATES"

    COUNTRY_INVALID = "COUNTRY_INVALID"

    COUNTRY_MISMATCH = "COUNTRY_MISMATCH"

    DEPTH_MIN_MAX_SWAPPED = "DEPTH_MIN_MAX_SWAPPED"

    DEPTH_NON_NUMERIC = "DEPTH_NON_NUMERIC"

    DEPTH_NOT_METRIC = "DEPTH_NOT_METRIC"

    DEPTH_UNLIKELY = "DEPTH_UNLIKELY"

    ELEVATION_MIN_MAX_SWAPPED = "ELEVATION_MIN_MAX_SWAPPED"

    ELEVATION_NON_NUMERIC = "ELEVATION_NON_NUMERIC"

    ELEVATION_NOT_METRIC = "ELEVATION_NOT_METRIC"

    ELEVATION_UNLIKELY = "ELEVATION_UNLIKELY"

    GEODETIC_DATUM_ASSUMED_WGS84 = "GEODETIC_DATUM_ASSUMED_WGS84"

    GEODETIC_DATUM_INVALID = "GEODETIC_DATUM_INVALID"

    IDENTIFIED_DATE_INVALID = "IDENTIFIED_DATE_INVALID"

    IDENTIFIED_DATE_UNLIKELY = "IDENTIFIED_DATE_UNLIKELY"

    INTERPRETATION_ERROR = "INTERPRETATION_ERROR"

    MODIFIED_DATE_INVALID = "MODIFIED_DATE_INVALID"

    MODIFIED_DATE_UNLIKELY = "MODIFIED_DATE_UNLIKELY"

    MULTIMEDIA_DATE_INVALID = "MULTIMEDIA_DATE_INVALID"

    MULTIMEDIA_URI_INVALID = "MULTIMEDIA_URI_INVALID"

    PRESUMED_NEGATED_LATITUDE = "PRESUMED_NEGATED_LATITUDE"

    PRESUMED_NEGATED_LONGITUDE = "PRESUMED_NEGATED_LONGITUDE"

    PRESUMED_SWAPPED_COORDINATE = "PRESUMED_SWAPPED_COORDINATE"

    RECORDED_DATE_INVALID = "RECORDED_DATE_INVALID"

    RECORDED_DATE_MISMATCH = "RECORDED_DATE_MISMATCH"

    RECORDED_DATE_UNLIKELY = "RECORDED_DATE_UNLIKELY"

    REFERENCES_URI_INVALID = "REFERENCES_URI_INVALID"

    TAXON_MATCH_FUZZY = "TAXON_MATCH_FUZZY"

    TAXON_MATCH_HIGHERRANK = "TAXON_MATCH_HIGHERRANK"

    TAXON_MATCH_NONE = "TAXON_MATCH_NONE"

    TYPE_STATUS_INVALID = "TYPE_STATUS_INVALID"

    ZERO_COORDINATE = "ZERO_COORDINATE"


    @classmethod
    def to_string(cls, val):
        """Returns the string equivalent for the Enum.

        """
        for k,v in vars(cls).iteritems():
            if v==val:
                return k

    @classmethod
    def from_string(cls, str):
        """Creates an instance of the Enum from a given string.

        """
        return getattr(cls, str.upper(), None)
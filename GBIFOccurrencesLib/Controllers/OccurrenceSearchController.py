"""
   GBIFOccurrencesLib.Controllers.OccurrenceSearchController

   This file was automatically generated by APIMATIC BETA v2.0 on 10/29/2015
"""
import unirest

from GBIFOccurrencesLib.APIHelper import APIHelper
from GBIFOccurrencesLib.Configuration import Configuration
from GBIFOccurrencesLib.APIException import APIException


class OccurrenceSearchController(object):


    """A Controller to access Endpoints in the GBIFOccurrencesLib API."""

    def __init__(self,
                 user,
                 password):
        """
        Constructor with authentication and configuration parameters
        """
        self.__user = user
        self.__password = password

    def get_occurrence_search_catalog_number(self,
                                             options=dict()):
        """Does a GET request to /occurrence/search/catalogNumber.

        Search that returns matching catalog numbers. Results are ordered by
        relevance.

        Args:
            options (dict, optional): Key-value pairs for any of the
                parameters to this API Endpoint. All parameters to the
                endpoint are supplied through the dictionary with their names
                being the key and their desired values being the value. A list
                of parameters that can be used are::

                    limit -- int -- The maximum number of results to return.
                        This can't be greater than 300, any value greater is
                        set to 300.
                    q -- string -- Simple search parameter. The value for this
                        parameter can be a simple word or a phrase.

        Returns:
            mixed: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/occurrence/search/catalogNumber"

        # Process optional query parameters
        query_builder = APIHelper.append_url_with_query_parameters(query_builder, {
            "limit": options.get('limit', None),
            "q": options.get('q', None)
        })

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {
            "user-agent": "APIMATIC 2.0",
            "accept": "application/json"
        }

        # Prepare and invoke the API call request to fetch the response
        response = unirest.get(query_url, headers=headers)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        return response.body

    def get_occurrence_search_collection_code(self,
                                              options=dict()):
        """Does a GET request to /occurrence/search/collectionCode.

        Search that returns matching collection codes. Results are ordered by
        relevance.

        Args:
            options (dict, optional): Key-value pairs for any of the
                parameters to this API Endpoint. All parameters to the
                endpoint are supplied through the dictionary with their names
                being the key and their desired values being the value. A list
                of parameters that can be used are::

                    limit -- int -- The maximum number of results to return.
                        This can't be greater than 300, any value greater is
                        set to 300.
                    q -- string -- Simple search parameter. The value for this
                        parameter can be a simple word or a phrase.

        Returns:
            mixed: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/occurrence/search/collectionCode"

        # Process optional query parameters
        query_builder = APIHelper.append_url_with_query_parameters(query_builder, {
            "limit": options.get('limit', None),
            "q": options.get('q', None)
        })

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {
            "user-agent": "APIMATIC 2.0",
            "accept": "application/json"
        }

        # Prepare and invoke the API call request to fetch the response
        response = unirest.get(query_url, headers=headers)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        return response.body

    def get_occurrence_search_recorded_by(self,
                                          options=dict()):
        """Does a GET request to /occurrence/search/recordedBy.

        Search that returns matching collector names. Results are ordered by
        relevance.

        Args:
            options (dict, optional): Key-value pairs for any of the
                parameters to this API Endpoint. All parameters to the
                endpoint are supplied through the dictionary with their names
                being the key and their desired values being the value. A list
                of parameters that can be used are::

                    limit -- int -- The maximum number of results to return.
                        This can't be greater than 300, any value greater is
                        set to 300.
                    q -- string -- Simple search parameter. The value for this
                        parameter can be a simple word or a phrase.

        Returns:
            mixed: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/occurrence/search/recordedBy"

        # Process optional query parameters
        query_builder = APIHelper.append_url_with_query_parameters(query_builder, {
            "limit": options.get('limit', None),
            "q": options.get('q', None)
        })

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {
            "user-agent": "APIMATIC 2.0",
            "accept": "application/json"
        }

        # Prepare and invoke the API call request to fetch the response
        response = unirest.get(query_url, headers=headers)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        return response.body

    def get_occurrence_search_institution_code(self,
                                               options=dict()):
        """Does a GET request to /occurrence/search/institutionCode.

        Search that returns matching institution codes. Results are ordered by
        relevance.

        Args:
            options (dict, optional): Key-value pairs for any of the
                parameters to this API Endpoint. All parameters to the
                endpoint are supplied through the dictionary with their names
                being the key and their desired values being the value. A list
                of parameters that can be used are::

                    limit -- int -- The maximum number of results to return.
                        This can't be greater than 300, any value greater is
                        set to 300.
                    q -- string -- Simple search parameter. The value for this
                        parameter can be a simple word or a phrase.

        Returns:
            mixed: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/occurrence/search/institutionCode"

        # Process optional query parameters
        query_builder = APIHelper.append_url_with_query_parameters(query_builder, {
            "limit": options.get('limit', None),
            "q": options.get('q', None)
        })

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {
            "user-agent": "APIMATIC 2.0",
            "accept": "application/json"
        }

        # Prepare and invoke the API call request to fetch the response
        response = unirest.get(query_url, headers=headers)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        return response.body

    def get_occurrence_search_search(self,
                                     options=dict()):
        """Does a GET request to /occurrence/search.

        Full search across all occurrences. Results are ordered by relevance.

        Args:
            options (dict, optional): Key-value pairs for any of the
                parameters to this API Endpoint. All parameters to the
                endpoint are supplied through the dictionary with their names
                being the key and their desired values being the value. A list
                of parameters that can be used are::

                    basis_of_record -- BasisOfRecordEnum -- Basis of record,
                        as defined in our BasisOfRecord enum
                    catalog_number -- string -- An identifier of any form
                        assigned by the source within a physical collection or
                        digital dataset for the record which may not be
                        unique, but should be fairly unique in combination
                        with the institution and collection code.
                    collection_code -- string -- An identifier of any form
                        assigned by the source to identify the physical
                        collection or digital dataset uniquely within the
                        context of an institution.
                    continent -- ContinentEnum -- Continent, as defined in the
                        GBIF Continent enum
                    country -- string -- The 2-letter country code (as per
                        ISO-3166-1) of the country in which the occurrence was
                        recorded.
                    dataset_key -- string -- The occurrence dataset key (a
                        uuid)
                    decimal_latitude -- string -- Latitude in decimals between
                        -90 and 90 based on WGS 84.. Supports range queries.
                    decimal_longitude -- string -- Longitude in decimals
                        between -180 and 180 based on WGS 84.. Supports range
                        queries.
                    depth -- string -- Depth in meters relative to altitude.
                        For example 10 meters below a lake surface with given
                        altitude. Supports range queries.
                    elevation -- string -- Elevation (altitude) in meters
                        above sea level. Supports range queries.
                    event_date -- string -- Occurrence date in ISO 8601
                        format: yyyy, yyyy-MM, yyyy-MM-dd, or MM-dd. Supports
                        range queries.
                    geometry -- string -- Searches for occurrences inside a
                        polygon described in Well Known Text (WKT) format.
                        Only POINT, LINESTRING, LINEARRING and POLYGON are
                        accepted WKT types. For example, a shape written as
                        POLYGON ((30.1 10.1, 10 20, 20 40, 40 40, 30.1 10.1))
                        would be queried as is, i.e.
                        /occurrence/search?geometry=POLYGON((30.1 10.1, 10 20,
                        20 40, 40 40, 30.1 10.1)).
                    has_coordinate -- string -- Limits searches to occurrence
                        records which contain a value in both latitude and
                        longitude (i.e. hasCoordinate=true limits to
                        occurrence records with coordinate values and
                        hasCoordinate=false limits to occurrence records
                        without coordinate values).
                    has_geospatial_issue -- string -- Includes/excludes
                        occurrence records which contain spatial issues (as
                        determined in our record interpretation), i.e.
                        hasGeospatialIssue=true returns only those records
                        with spatial issues while hasGeospatialIssue=false
                        includes only records without spatial issues. The
                        absence of this parameter returns any record with or
                        without spatial issues.
                    institution_code -- string -- An identifier of any form
                        assigned by the source to identify the institution the
                        record belongs to. Not guaranteed to be unique.
                    issue -- OccurrenceIssueEnum -- A specific interpretation
                        issue as defined in our OccurrenceIssue enum
                    last_interpreted -- string -- This date the record was
                        last modified in GBIF, in ISO 8601 format: yyyy,
                        yyyy-MM, yyyy-MM-dd, or MM-dd. Supports range
                        queries.
                    limit -- int -- Controls the number of results in the
                        page. Using too high a value will be overwritten with
                        the default maximum threshold, depending on the
                        service. Sensible defaults are used so this may be
                        omitted.
                    media_type -- MediaTypeEnum -- The kind of multimedia
                        associated with an occurrence as defined in our
                        MediaType enum
                    month -- string -- The month of the year, starting with 1
                        for January. Supports range queries.
                    offset -- int -- Determines the offset for the search
                        results. A limit of 20 and offset of 20, will get the
                        second page of 20 results.
                    publishing_country -- string -- The 2-letter country code
                        (as per ISO-3166-1) of the owining organization's
                        country.
                    recorded_by -- string -- The person who recorded the
                        occurrence.
                    record_number -- int -- An identifier given to the record
                        at the time it was recorded in the field.
                    scientific_name -- string -- A scientific name from the
                        GBIF backbone. All included and synonym taxa are
                        included in the search. Under the hood a call to the
                        species match service is done first to retrieve a
                        taxonKey. Only unique scientific names will return
                        results, homonyms (many monomials) return nothing!
                        Consider to use the taxonKey parameter instead and the
                        species match service directly
                    taxon_key -- string -- A taxon key from the GBIF backbone.
                        All included and synonym taxa are included in the
                        search, so a search for aves with taxonKey=212 (i.e.
                        /occurrence/search?taxonKey=212) will match all birds,
                        no matter which species.
                    year -- string -- The 4 digit year. A year of 98 will be
                        interpreted as AD 98. Supports range queries.

        Returns:
            mixed: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/occurrence/search"

        # Process optional query parameters
        query_builder = APIHelper.append_url_with_query_parameters(query_builder, {
            "basisOfRecord":  options.get('basis_of_record', None).to_string() if options.get('basis_of_record', None) is not None else None,
            "catalogNumber": options.get('catalog_number', None),
            "collectionCode": options.get('collection_code', None),
            "continent":  options.get('continent', None).to_string() if options.get('continent', None) is not None else None,
            "country": options.get('country', None),
            "datasetKey": options.get('dataset_key', None),
            "decimalLatitude": options.get('decimal_latitude', None),
            "decimalLongitude": options.get('decimal_longitude', None),
            "depth": options.get('depth', None),
            "elevation": options.get('elevation', None),
            "eventDate": options.get('event_date', None),
            "geometry":  options.get('geometry', None) if options.get('geometry', None) is not None else "POLYGON((160 -60,160 -25,180 -25,180 -60,160 -60))",
            "hasCoordinate": options.get('has_coordinate', None),
            "hasGeospatialIssue": options.get('has_geospatial_issue', None),
            "institutionCode": options.get('institution_code', None),
            "issue":  options.get('issue', None).to_string() if options.get('issue', None) is not None else None,
            "lastInterpreted": options.get('last_interpreted', None),
            "limit":  options.get('limit', None) if options.get('limit', None) is not None else 300,
            "mediaType":  options.get('media_type', None).to_string() if options.get('media_type', None) is not None else None,
            "month": options.get('month', None),
            "offset": options.get('offset', None),
            "publishingCountry":  options.get('publishing_country', None) if options.get('publishing_country', None) is not None else "NZ",
            "recordedBy": options.get('recorded_by', None),
            "recordNumber": options.get('record_number', None),
            "scientificName": options.get('scientific_name', None),
            "taxonKey": options.get('taxon_key', None),
            "year": options.get('year', None)
        })

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {
            "user-agent": "APIMATIC 2.0",
            "accept": "application/json"
        }

        # Prepare and invoke the API call request to fetch the response
        response = unirest.get(query_url, headers=headers)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            print "RESPONSE\n%s\n%s\n" % (response.code, response.body)
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        return response.body

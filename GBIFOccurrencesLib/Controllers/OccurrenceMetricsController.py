"""
   GBIFOccurrencesLib.Controllers.OccurrenceMetricsController

   This file was automatically generated by APIMATIC BETA v2.0 on 10/29/2015
"""
import unirest

from GBIFOccurrencesLib.APIHelper import APIHelper
from GBIFOccurrencesLib.Configuration import Configuration
from GBIFOccurrencesLib.APIException import APIException


class OccurrenceMetricsController(object):


    """A Controller to access Endpoints in the GBIFOccurrencesLib API."""

    def __init__(self,
                 user,
                 password):
        """
        Constructor with authentication and configuration parameters
        """
        self.__user = user
        self.__password = password

    def get_occurrence_metrics_count(self,
                                     options=dict()):
        """Does a GET request to /occurrence/count.

        Returns occurrence counts for a predefined set of dimensions. The
        supported dimensions are enumerated in the /occurrence/count/schema
        service. An example for the count of georeferenced observations from
        Canada:
        /occurrence/count?country=CA&isGeoreferenced=true&basisOfRecord=OBSERVA
        TION. 

        Args:
            options (dict, optional): Key-value pairs for any of the
                parameters to this API Endpoint. All parameters to the
                endpoint are supplied through the dictionary with their names
                being the key and their desired values being the value. A list
                of parameters that can be used are::

                    basis_of_record -- string -- basisOfRecord
                    country -- string -- Country
                    dataset_key -- string -- datasetKey
                    is_geo_referenced -- bool -- isGeoreferenced
                    issue -- string -- issue
                    publishing_country -- string -- publishingCountry
                    taxon_key -- int -- taxonKey
                    type_status -- string -- typeStatus

        Returns:
            int: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/occurrence/count"

        # Process optional query parameters
        query_builder = APIHelper.append_url_with_query_parameters(query_builder, {
            "basisOfRecord": options.get('basis_of_record', None),
            "country": options.get('country', None),
            "datasetKey": options.get('dataset_key', None),
            "isGeoReferenced": options.get('is_geo_referenced', None),
            "issue": options.get('issue', None),
            "publishingCountry":  options.get('publishing_country', None) if options.get('publishing_country', None) is not None else "NZ",
            "taxonKey": options.get('taxon_key', None),
            "typeStatus": options.get('type_status', None)
        })

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {
            "user-agent": "APIMATIC 2.0"
        }

        # Prepare and invoke the API call request to fetch the response
        response = unirest.get(query_url, headers=headers)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        return response.body

    def get_occurrence_metrics_count_schema(self):
        """Does a GET request to /occurrence/count/schema.

        List the supported metrics by the service.

        Returns:
            mixed: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/occurrence/count/schema"

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {
            "user-agent": "APIMATIC 2.0",
            "accept": "application/json"
        }

        # Prepare and invoke the API call request to fetch the response
        response = unirest.get(query_url, headers=headers)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        return response.body

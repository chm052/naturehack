"""
   GBIFOccurrencesLib.Controllers.OccurrencesController

   This file was automatically generated by APIMATIC BETA v2.0 on 10/29/2015
"""
import unirest

from GBIFOccurrencesLib.APIHelper import APIHelper
from GBIFOccurrencesLib.Configuration import Configuration
from GBIFOccurrencesLib.APIException import APIException
from GBIFOccurrencesLib.Models.Occurrence import Occurrence
from GBIFOccurrencesLib.Models.VerbatimOccurrence import VerbatimOccurrence


class OccurrencesController(object):


    """A Controller to access Endpoints in the GBIFOccurrencesLib API."""

    def __init__(self,
                 user,
                 password):
        """
        Constructor with authentication and configuration parameters
        """
        self.__user = user
        self.__password = password

    def get_occurrence_get_by_key(self,
                                  key):
        """Does a GET request to /occurrence/{key}.

        Gets details for a single, interpreted occurrence

        Args:
            key (int): Gets details for a single, interpreted occurrence

        Returns:
            Occurrence: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/occurrence/{key}"

        # Process optional template parameters
        query_builder = APIHelper.append_url_with_template_parameters(query_builder, { 
            "key": key
        })

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {
            "user-agent": "APIMATIC 2.0",
            "accept": "application/json"
        }

        # Prepare and invoke the API call request to fetch the response
        response = unirest.get(query_url, headers=headers)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        # Try to cast response to desired type
        if isinstance(response.body, dict):
            # Response is already in a dictionary, return the object 
            return Occurrence(**response.body)
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body) 

    def get_occurrence_get_single_by_key(self,
                                         key):
        """Does a GET request to /occurrence/{key}/fragment.

        Get a single occurrence fragment in its raw form (xml or json)

        Args:
            key (int): Get a single occurrence fragment in its raw form (xml
                or json)

        Returns:
            mixed: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/occurrence/{key}/fragment"

        # Process optional template parameters
        query_builder = APIHelper.append_url_with_template_parameters(query_builder, { 
            "key": key
        })

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {
            "user-agent": "APIMATIC 2.0",
            "accept": "application/json"
        }

        # Prepare and invoke the API call request to fetch the response
        response = unirest.get(query_url, headers=headers)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        return response.body

    def get_occurrence_get_verbatim(self,
                                    key):
        """Does a GET request to /occurrence/{key}/verbatim.

        Gets the verbatim occurrence record without any interpretation

        Args:
            key (int): Gets the verbatim occurrence record without any
                interpretation

        Returns:
            VerbatimOccurrence: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/occurrence/{key}/verbatim"

        # Process optional template parameters
        query_builder = APIHelper.append_url_with_template_parameters(query_builder, { 
            "key": key
        })

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {
            "user-agent": "APIMATIC 2.0",
            "accept": "application/json"
        }

        # Prepare and invoke the API call request to fetch the response
        response = unirest.get(query_url, headers=headers)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        # Try to cast response to desired type
        if isinstance(response.body, dict):
            # Response is already in a dictionary, return the object 
            return VerbatimOccurrence(**response.body)
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body) 

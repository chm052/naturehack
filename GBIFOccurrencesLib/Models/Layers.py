"""
   GBIFOccurrencesLib.Models.Layers
 
   This file was automatically generated by APIMATIC BETA v2.0 on 10/29/2015
"""
from GBIFOccurrencesLib.APIHelper import APIHelper
from GBIFOccurrencesLib.Models.LayersObservationsEnum import LayersObservationsEnum
from GBIFOccurrencesLib.Models.LayersSpecimensEnum import LayersSpecimensEnum
from GBIFOccurrencesLib.Models.LayersLivingEnum import LayersLivingEnum
from GBIFOccurrencesLib.Models.LayersFossilEnum import LayersFossilEnum
from GBIFOccurrencesLib.Models.LayersOtherEnum import LayersOtherEnum

class Layers(object):

    """Implementation of the 'Layers' model.

     The following layers may be used to instruct the server to combine the
     content into a single density layer. All layers declared will be combined
     by the server on rendering. Thus, for a given taxon, country, dataset or
     provider, it is possible to retrieve e.g:      A map of specimens only   
     A map of specimens and observations     A map of specimens only, and
     collected after 1970     A map of everything observed or collected after
     2000     A map of everything where the year is known     A map of
     everything omitting those data known to be living specimens     ..etc 
     The quickest way to experiment with this is to use the preview
     functionality. The specification for the layers are provided below.     
     This is a multivalue field so it is expected that several layers are
     requested in any single URL     Should no layers be specified, a sensible
     default is provided. This is to preserve backwards compatibility since
     layering was an additional feature, and considered acceptable since a map
     with no layers makes little sense. At present the default returns all
     layers, but could be subject to future change (e.g. should a layer of
     records with known issues be added, it might not be included in the
     default)

    Attributes:
        observations (LayersObservationsEnum): Observation layers can take no
            year (&layer=OBS_NO_YEAR), before the 1900s (&layer=OBS_PRE_1900)
            or any decade after 1900.
        specimens (LayersSpecimensEnum): Specimen layers can take no year
            (&layer=SP_NO_YEAR), before the 1900s (&layer=SP_PRE_1900) or any
            decade after 1900.
        living (LayersLivingEnum): If provided, the records with a declared
            basis of record of living will be included. 
        fossil (LayersFossilEnum): If provided, the records with a declared
            basis of record of fossil will be included. 
        other (LayersOtherEnum): Records where the basis of record is unknown,
            or something other than those above can take no year
            (&layer=OTH_NO_YEAR), before the 1900s (&layer=OTH_PRE_1900) or
            any decade after 1900.

    """

    def __init__(self,
                 **kwargs):
        """Constructor for the Layers class
        
        Args:
            **kwargs: Keyword Arguments in order to initialise the
                object. Any of the attributes in this object are able to
                be set through the **kwargs of the constructor. The values
                that can be supplied and their types are as follows::

                    Observations -- LayersObservationsEnum -- Sets the attribute observations
                    Specimens -- LayersSpecimensEnum -- Sets the attribute specimens
                    Living -- LayersLivingEnum -- Sets the attribute living
                    Fossil -- LayersFossilEnum -- Sets the attribute fossil
                    Other -- LayersOtherEnum -- Sets the attribute other
        
        """
        # Set all of the parameters to their default values
        self.observations = None
        self.specimens = None
        self.living = None
        self.fossil = None
        self.other = None

        # Create a mapping from API property names to Model property names
        replace_names = {
            "Observations": "observations",
            "Specimens": "specimens",
            "Living": "living",
            "Fossil": "fossil",
            "Other": "other",
        }

        # Parse all of the Key-Value arguments
        if kwargs is not None:
            for key in kwargs:
                # Only add arguments that are actually part of this object
                if key in replace_names:
                    setattr(self, replace_names[key], kwargs[key])

            # Other objects also need to be initialised properly
            if "Observations" in kwargs:
                self.observations = LayersObservationsEnum.from_string(kwargs["Observations"])

            # Other objects also need to be initialised properly
            if "Specimens" in kwargs:
                self.specimens = LayersSpecimensEnum.from_string(kwargs["Specimens"])

            # Other objects also need to be initialised properly
            if "Living" in kwargs:
                self.living = LayersLivingEnum.from_string(kwargs["Living"])

            # Other objects also need to be initialised properly
            if "Fossil" in kwargs:
                self.fossil = LayersFossilEnum.from_string(kwargs["Fossil"])

            # Other objects also need to be initialised properly
            if "Other" in kwargs:
                self.other = LayersOtherEnum.from_string(kwargs["Other"])

    def resolve_names(self):
        """Creates a dictionary representation of this object.
        
        This method converts an object to a dictionary that represents the
        format that the model should be in when passed into an API Request.
        Because of this, the generated dictionary may have different
        property names to that of the model itself.
        
        Returns:
            dict: The dictionary representing the object.
        
        """
        # Create a mapping from Model property names to API property names
        replace_names = {
            "observations": "Observations",
            "specimens": "Specimens",
            "living": "Living",
            "fossil": "Fossil",
            "other": "Other",
        }

        retval = dict()

        return APIHelper.resolve_names(self, replace_names, retval)
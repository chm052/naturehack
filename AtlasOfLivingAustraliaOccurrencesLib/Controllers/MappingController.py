"""
   AtlasOfLivingAustraliaOccurrencesLib.Controllers.MappingController

   This file was automatically generated by APIMATIC BETA v2.0 on 10/29/2015
"""
import unirest

from AtlasOfLivingAustraliaOccurrencesLib.APIHelper import APIHelper
from AtlasOfLivingAustraliaOccurrencesLib.Configuration import Configuration
from AtlasOfLivingAustraliaOccurrencesLib.APIException import APIException


class MappingController(object):


    """A Controller to access Endpoints in the AtlasOfLivingAustraliaOccurrencesLib API."""

    def get_wms_get_capabilities(self,
                                 options=dict()):
        """Does a GET request to /ws/ogc/ows.

        Web Mapping Service GetCapabilities. This is an OGC service that can
        be used to retrieve a listing of layers for taxa in a hierarchical
        format in XML.

        Args:
            options (dict, optional): Key-value pairs for any of the
                parameters to this API Endpoint. All parameters to the
                endpoint are supplied through the dictionary with their names
                being the key and their desired values being the value. A list
                of parameters that can be used are::

                    dir -- int -- Supports "asc" or "desc" 
                    facet -- string -- Supported values are "off" or "on". By
                        default, its "on". This is worth switching off if
                        facetting is not required, to reduce the JSON being
                        sent.
                    facets -- string -- Comma separated list of the fields to
                        create facets on e.g. facets=basis_of_record.
                    flimit -- int -- Maximum number of facet values to return
                    foffset -- int -- Facet offset, to enable paging
                    fprefix -- int -- Limits facets to values that start with
                        the supplied value
                    fq -- list of string -- Filters to be applied to the
                        original query. These are additional params of the
                        form fq=INDEXEDFIELD:VALUE e.g. fq=kingdom:Fungi. See
                        http://biocache.ala.org.au/ws/index/fields for all the
                        fields that a queryable.
                    fsort -- int -- Method in which to sort the facets either
                        "count" or "index" 
                    lat -- double -- The decimal latitude to limit records to.
                        Use with lon and radius to specify a "search" circle
                    lon -- double -- The decimal longitude to limit records
                        to. Use with lon and radius to specify a "search"
                        circle
                    page_size -- int -- Number of records to return
                    q -- string -- Query of the form field:value e.g.
                        q=genus:Macropus or a free text search e.g.
                        q=Macropus
                    radius -- double -- The radius in which to limit records
                        (relative to the lat, lon point). Use with lat and lon
                        to specify a "search" circle.
                    sort -- int -- The indexed field to sort by
                    start_index -- int -- Record offset, to enable paging
                    wkt -- string -- The polygon area in which to limit
                        records.

        Returns:
            string: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/ws/ogc/ows"

        # Process optional query parameters
        query_builder = APIHelper.append_url_with_query_parameters(query_builder, {
            "dir": options.get('dir', None),
            "facet": options.get('facet', None),
            "facets": options.get('facets', None),
            "flimit": options.get('flimit', None),
            "foffset": options.get('foffset', None),
            "fprefix": options.get('fprefix', None),
            "fq": options.get('fq', None),
            "fsort": options.get('fsort', None),
            "lat":  options.get('lat', None) if options.get('lat', None) is not None else -41.290817,
            "lon":  options.get('lon', None) if options.get('lon', None) is not None else 174.753377,
            "pageSize": options.get('page_size', None),
            "q": options.get('q', None),
            "radius":  options.get('radius', None) if options.get('radius', None) is not None else 20,
            "sort": options.get('sort', None),
            "startIndex": options.get('start_index', None),
            "wkt":  options.get('wkt', None) if options.get('wkt', None) is not None else "POLYGON((160 -60,160 -25,180 -25,180 -60,160 -60))"
        })

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {
            "user-agent": "APIMATIC 2.0"
        }

        # Prepare and invoke the API call request to fetch the response
        response = unirest.get(query_url, headers=headers)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        return response.body

    def get_wms_get_metadata(self,
                             options=dict()):
        """Does a GET request to /ws/ogc/getMetadata.

        Returns Marine community Profile XML

        Args:
            options (dict, optional): Key-value pairs for any of the
                parameters to this API Endpoint. All parameters to the
                endpoint are supplied through the dictionary with their names
                being the key and their desired values being the value. A list
                of parameters that can be used are::

                    q -- string -- Query of the form field:value e.g.
                        q=genus:Macropus or a free text search e.g.
                        q=Macropus
                    dir -- int -- Supports "asc" or "desc" 
                    facet -- string -- Supported values are "off" or "on". By
                        default, its "on". This is worth switching off if
                        facetting is not required, to reduce the JSON being
                        sent.
                    facets -- string -- Comma separated list of the fields to
                        create facets on e.g. facets=basis_of_record.
                    flimit -- int -- Maximum number of facet values to return
                    foffset -- int -- Facet offset, to enable paging
                    fprefix -- int -- Limits facets to values that start with
                        the supplied value
                    fq -- list of string -- Filters to be applied to the
                        original query. These are additional params of the
                        form fq=INDEXEDFIELD:VALUE e.g. fq=kingdom:Fungi. See
                        http://biocache.ala.org.au/ws/index/fields for all the
                        fields that a queryable.
                    fsort -- int -- Method in which to sort the facets either
                        "count" or "index" 
                    lat -- double -- The decimal latitude to limit records to.
                        Use with lon and radius to specify a "search" circle
                    lon -- double -- The decimal longitude to limit records
                        to. Use with lon and radius to specify a "search"
                        circle
                    page_size -- int -- Number of records to return
                    radius -- double -- The radius in which to limit records
                        (relative to the lat, lon point). Use with lat and lon
                        to specify a "search" circle.
                    sort -- int -- The indexed field to sort by
                    start_index -- int -- Record offset, to enable paging
                    wkt -- string -- The polygon area in which to limit
                        records. For information on Well known text

        Returns:
            string: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/ws/ogc/getMetadata"

        # Process optional query parameters
        query_builder = APIHelper.append_url_with_query_parameters(query_builder, {
            "q": options.get('q', None),
            "dir": options.get('dir', None),
            "facet": options.get('facet', None),
            "facets": options.get('facets', None),
            "flimit": options.get('flimit', None),
            "foffset": options.get('foffset', None),
            "fprefix": options.get('fprefix', None),
            "fq": options.get('fq', None),
            "fsort": options.get('fsort', None),
            "lat":  options.get('lat', None) if options.get('lat', None) is not None else -41.290817,
            "lon":  options.get('lon', None) if options.get('lon', None) is not None else 174.753377,
            "pageSize": options.get('page_size', None),
            "radius":  options.get('radius', None) if options.get('radius', None) is not None else 20,
            "sort": options.get('sort', None),
            "startIndex": options.get('start_index', None),
            "wkt":  options.get('wkt', None) if options.get('wkt', None) is not None else "POLYGON((160 -60,160 -25,180 -25,180 -60,160 -60))"
        })

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {
            "user-agent": "APIMATIC 2.0"
        }

        # Prepare and invoke the API call request to fetch the response
        response = unirest.get(query_url, headers=headers)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        return response.body

    def get_wms_get_feature_info(self,
                                 options=dict()):
        """Does a GET request to /ws/ogc/getFeatureInfo.

        WMS GetFeatureInfo

        Args:
            options (dict, optional): Key-value pairs for any of the
                parameters to this API Endpoint. All parameters to the
                endpoint are supplied through the dictionary with their names
                being the key and their desired values being the value. A list
                of parameters that can be used are::

                    dir -- int -- Supports "asc" or "desc" 
                    facet -- string -- Supported values are "off" or "on". By
                        default, its "on". This is worth switching off if
                        facetting is not required, to reduce the JSON being
                        sent.
                    facets -- string -- Comma separated list of the fields to
                        create facets on e.g. facets=basis_of_record.
                    flimit -- int -- Maximum number of facet values to return
                    foffset -- int -- Facet offset, to enable paging
                    fprefix -- int -- Limits facets to values that start with
                        the supplied value
                    fq -- list of string -- Filters to be applied to the
                        original query. These are additional params of the
                        form fq=INDEXEDFIELD:VALUE e.g. fq=kingdom:Fungi. See
                        http://biocache.ala.org.au/ws/index/fields for all the
                        fields that a queryable.
                    fsort -- int -- Method in which to sort the facets either
                        "count" or "index" 
                    lat -- double -- The decimal latitude to limit records to.
                        Use with lon and radius to specify a "search" circle
                    lon -- double -- The decimal longitude to limit records
                        to. Use with lon and radius to specify a "search"
                        circle
                    page_size -- int -- Number of records to return
                    q -- string -- Query of the form field:value e.g.
                        q=genus:Macropus or a free text search e.g.
                        q=Macropus
                    radius -- double -- The radius in which to limit records
                        (relative to the lat, lon point). Use with lat and lon
                        to specify a "search" circle.
                    sort -- int -- The indexed field to sort by
                    start_index -- int -- Record offset, to enable paging
                    wkt -- string -- The polygon area in which to limit
                        records. For information on Well known text

        Returns:
            string: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/ws/ogc/getFeatureInfo"

        # Process optional query parameters
        query_builder = APIHelper.append_url_with_query_parameters(query_builder, {
            "dir": options.get('dir', None),
            "facet": options.get('facet', None),
            "facets": options.get('facets', None),
            "flimit": options.get('flimit', None),
            "foffset": options.get('foffset', None),
            "fprefix": options.get('fprefix', None),
            "fq": options.get('fq', None),
            "fsort": options.get('fsort', None),
            "lat":  options.get('lat', None) if options.get('lat', None) is not None else -41.290817,
            "lon":  options.get('lon', None) if options.get('lon', None) is not None else 174.753377,
            "pageSize": options.get('page_size', None),
            "q": options.get('q', None),
            "radius":  options.get('radius', None) if options.get('radius', None) is not None else 20,
            "sort": options.get('sort', None),
            "startIndex": options.get('start_index', None),
            "wkt":  options.get('wkt', None) if options.get('wkt', None) is not None else "POLYGON((160 -60,160 -25,180 -25,180 -60,160 -60))"
        })

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {
            "user-agent": "APIMATIC 2.0"
        }

        # Prepare and invoke the API call request to fetch the response
        response = unirest.get(query_url, headers=headers)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        return response.body

    def get_wms_legend(self,
                       options=dict()):
        """Does a GET request to /ws/mapping/legend.

        Returns a table of values to allow a legend to be generated by the
        client.

        Args:
            options (dict, optional): Key-value pairs for any of the
                parameters to this API Endpoint. All parameters to the
                endpoint are supplied through the dictionary with their names
                being the key and their desired values being the value. A list
                of parameters that can be used are::

                    cm -- string -- Colour mode - facet to use for generating
                        the colour gradations
                    dir -- int --   Supports "asc" or "desc"
                    facet -- string --   Supported values are "off" or "on".
                        By default, its "on". This is worth switching off if
                        facetting is not required, to reduce the JSON being
                        sent.
                    facets -- string --   Comma separated list of the fields
                        to create facets on e.g. facets=basis_of_record.
                    flimit -- int --   Maximum number of facet values to
                        return
                    foffset -- int --   Facet offset, to enable paging
                    fprefix -- int --   Limits facets to values that start
                        with the supplied value
                    fq -- list of string --   Filters to be applied to the
                        original query. These are additional params of the
                        form fq=INDEXEDFIELD:VALUE e.g. fq=kingdom:Fungi. See
                        http://biocache.ala.org.au/ws/index/fields for all the
                        fields that a queryable.
                    fsort -- int --   Method in which to sort the facets
                        either "count" or "index"
                    lat -- double --   The decimal latitude to limit records
                        to. Use with lon and radius to specify a "search"
                        circle
                    lon -- double --   The decimal latitude to limit records
                        to. Use with lon and radius to specify a "search"
                        circle
                    page_size -- int --   Number of records to return
                    q -- string --   Query of the form field:value e.g.
                        q=genus:Macropus or a free text search e.g.
                        q=Macropus
                    radius -- double --   The radius in which to limit records
                        (relative to the lat, lon point). Use with lat and lon
                        to specify a "search" circle.
                    sort -- int --   The indexed field to sort by
                    start_index -- int --   Record offset, to enable paging
                    wkt -- string --   The polygon area in which to limit
                        records. For information on Well known text

        Returns:
            string: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/ws/mapping/legend"

        # Process optional query parameters
        query_builder = APIHelper.append_url_with_query_parameters(query_builder, {
            "cm":  options.get('cm', None) if options.get('cm', None) is not None else "taxon_name",
            "dir": options.get('dir', None),
            "facet": options.get('facet', None),
            "facets": options.get('facets', None),
            "flimit": options.get('flimit', None),
            "foffset": options.get('foffset', None),
            "fprefix": options.get('fprefix', None),
            "fq": options.get('fq', None),
            "fsort": options.get('fsort', None),
            "lat":  options.get('lat', None) if options.get('lat', None) is not None else -41.290817,
            "lon":  options.get('lon', None) if options.get('lon', None) is not None else 174.753377,
            "pageSize": options.get('page_size', None),
            "q": options.get('q', None),
            "radius":  options.get('radius', None) if options.get('radius', None) is not None else 20,
            "sort": options.get('sort', None),
            "startIndex": options.get('start_index', None),
            "wkt":  options.get('wkt', None) if options.get('wkt', None) is not None else "POLYGON((160 -60,160 -25,180 -25,180 -60,160 -60))"
        })

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {
            "user-agent": "APIMATIC 2.0"
        }

        # Prepare and invoke the API call request to fetch the response
        response = unirest.get(query_url, headers=headers)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        return response.body

    def get_generate_static_map(self,
                                options=dict()):
        """Does a GET request to /ws/mapping/wms/image.

        Generate a static image with various formatting options.

        Args:
            options (dict, optional): Key-value pairs for any of the
                parameters to this API Endpoint. All parameters to the
                endpoint are supplied through the dictionary with their names
                being the key and their desired values being the value. A list
                of parameters that can be used are::

                    extents -- string --   minx,miny,maxx,maxy 
                        160.0,-60.0,180.0,-25.0
                    baselayer -- string --   Base layer to use from
                        http://spatial.ala.org.au/geoserver
                    baselayer_prefix -- string --   Default "ALA:"
                    dpi -- string --   Dots per inch. Default is 300.
                    file_name -- string --   File name to use
                    format -- string --   Default 'jpg'
                    fq -- string --   Filters to be applied to the original
                        query. These are additional params of the form
                        fq=INDEXEDFIELD:VALUE e.g. fq=kingdom:Fungi. See
                        http://biocache.ala.org.au/ws/index/fields for all the
                        fields that a queryable.
                    outline -- string --   Point outline. Default is false
                    outline_colour -- string --   Default #000000
                    pcolour -- string --   Point colour in hex. Default is
                        FF0000
                    popacity -- string --   Point opacity. Default is 0.8
                    pradiusmm -- string --   Species point radius in mm,
                        integer
                    pradiuspx -- string --   Species point radius in pixels,
                        integer. Only pradiuspx or pradiusmm need be supplied.
                        If both supplied, pradiuspx takes precendence.
                    q -- string --   Query of the form field:value e.g.
                        q=genus:Macropus or a free text search e.g.
                        q=Macropus
                    scale -- string --   Include a scale. DefaultValue =
                        "off".
                    widthmm -- string --   Image width in mm

        Returns:
            binary: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/ws/mapping/wms/image"

        # Process optional query parameters
        query_builder = APIHelper.append_url_with_query_parameters(query_builder, {
            "extents": options.get('extents', None),
            "baselayer": options.get('baselayer', None),
            "baselayerPrefix":  options.get('baselayer_prefix', None) if options.get('baselayer_prefix', None) is not None else "ALA",
            "dpi":  options.get('dpi', None) if options.get('dpi', None) is not None else "300",
            "fileName": options.get('file_name', None),
            "format":  options.get('format', None) if options.get('format', None) is not None else "jpg",
            "fq": options.get('fq', None),
            "outline":  options.get('outline', None) if options.get('outline', None) is not None else "false",
            "outlineColour":  options.get('outline_colour', None) if options.get('outline_colour', None) is not None else "0x000000",
            "pcolour":  options.get('pcolour', None) if options.get('pcolour', None) is not None else "FF0000",
            "popacity":  options.get('popacity', None) if options.get('popacity', None) is not None else "0.8",
            "pradiusmm": options.get('pradiusmm', None),
            "pradiuspx": options.get('pradiuspx', None),
            "q": options.get('q', None),
            "scale":  options.get('scale', None) if options.get('scale', None) is not None else "off",
            "widthmm": options.get('widthmm', None)
        })

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {
            "user-agent": "APIMATIC 2.0"
        }

        # Prepare and invoke the API call request to fetch the response
        response = unirest.get(query_url, headers=headers)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        return response.body

    def get_wms_get_map(self,
                        options=dict()):
        """Does a GET request to /ws/ogc/wms/reflect.

        WMS services for point occurrence data

        Args:
            options (dict, optional): Key-value pairs for any of the
                parameters to this API Endpoint. All parameters to the
                endpoint are supplied through the dictionary with their names
                being the key and their desired values being the value. A list
                of parameters that can be used are::

                    dir -- int --   Supports "asc" or "desc"
                    env -- string --   Additional parameters. e.g.
                        ENV=color%3Acd3844%3Bsize%3A3%3Bopacity%3A0.8.     
                        color - hex RGB values. e.g. colour:cd3844.     size -
                        radius of points in pixels.     opacity - opacity
                        value 0 - 1.     sel - fq parameter applied to
                        CQL_FILTER. Matching occurrences will be highlighted
                        on the map in a Red circle.     uncertainty - presence
                        of the uncertainty parameter draws uncertainty circles
                        to a fixed maximum of 30km.     colormode - facet
                        colouring type.         -1 (default) use color value. 
                        grid map as density grid. Grid cells drawn are not
                        restricted to within any query WKT parameters.        
                        facetname colour as categories in a facet.        
                        facetname,cutpoints colour as range in a facet using
                        the supplied comma separated cutpoints. 4 to 10 values
                        are required. Include minimum and maximum. Minimum and
                        maximum values do not need to be accurate. e.g.
                        colormode:year,1800,1900,1950,1970,1990,2010
                    facet -- string --   Supported values are "off" or "on".
                        By default, its "on". This is worth switching off if
                        facetting is not required, to reduce the JSON being
                        sent.
                    facets -- string --   Comma separated list of the fields
                        to create facets on e.g. facets=basis_of_record.
                    flimit -- int --   Maximum number of facet values to
                        return
                    foffset -- int --   Facet offset, to enable paging
                    fprefix -- int --   Limits facets to values that start
                        with the supplied value
                    fq -- list of string --   Filters to be applied to the
                        original query. These are additional params of the
                        form fq=INDEXEDFIELD:VALUE e.g. fq=kingdom:Fungi. See
                        http://biocache.ala.org.au/ws/index/fields for all the
                        fields that a queryable.
                    fsort -- int --   Method in which to sort the facets
                        either "count" or "index"
                    lat -- double --   The decimal latitude to limit records
                        to. Use with lon and radius to specify a "search"
                        circle
                    lon -- double --   The decimal latitude to limit records
                        to. Use with lon and radius to specify a "search"
                        circle
                    page_size -- int --   Number of records to return
                    q -- string -- Query of the form field:value e.g.
                        q=genus:Macropus or a free text search e.g.
                        q=Macropus
                    radius -- double --   The radius in which to limit records
                        (relative to the lat, lon point). Use with lat and lon
                        to specify a "search" circle.
                    sort -- int --   The indexed field to sort by
                    start_index -- int --   Record offset, to enable paging
                    wkt -- string --   The polygon area in which to limit
                        records. For information on Well known text

        Returns:
            binary: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/ws/ogc/wms/reflect"

        # Process optional query parameters
        query_builder = APIHelper.append_url_with_query_parameters(query_builder, {
            "dir": options.get('dir', None),
            "ENV": options.get('env', None),
            "facet": options.get('facet', None),
            "facets": options.get('facets', None),
            "flimit": options.get('flimit', None),
            "foffset": options.get('foffset', None),
            "fprefix": options.get('fprefix', None),
            "fq": options.get('fq', None),
            "fsort": options.get('fsort', None),
            "lat":  options.get('lat', None) if options.get('lat', None) is not None else -41.290817,
            "lon":  options.get('lon', None) if options.get('lon', None) is not None else 174.753377,
            "pageSize": options.get('page_size', None),
            "q": options.get('q', None),
            "radius":  options.get('radius', None) if options.get('radius', None) is not None else 20,
            "sort": options.get('sort', None),
            "startIndex": options.get('start_index', None),
            "wkt":  options.get('wkt', None) if options.get('wkt', None) is not None else "POLYGON((160 -60,160 -25,180 -25,180 -60,160 -60))"
        })

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {
            "user-agent": "APIMATIC 2.0"
        }

        # Prepare and invoke the API call request to fetch the response
        response = unirest.get(query_url, headers=headers)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        return response.body

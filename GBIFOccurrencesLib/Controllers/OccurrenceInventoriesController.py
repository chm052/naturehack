"""
   GBIFOccurrencesLib.Controllers.OccurrenceInventoriesController

   This file was automatically generated by APIMATIC BETA v2.0 on 10/29/2015
"""
import unirest

from GBIFOccurrencesLib.APIHelper import APIHelper
from GBIFOccurrencesLib.Configuration import Configuration
from GBIFOccurrencesLib.APIException import APIException


class OccurrenceInventoriesController(object):


    """A Controller to access Endpoints in the GBIFOccurrencesLib API."""

    def __init__(self,
                 user,
                 password):
        """
        Constructor with authentication and configuration parameters
        """
        self.__user = user
        self.__password = password

    def get_occurrence_inventories_list_count_by_basis(self):
        """Does a GET request to /occurrence/counts/basisOfRecord.

        Lists occurrence counts by basis of record.

        Returns:
            mixed: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/occurrence/counts/basisOfRecord"

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {
            "user-agent": "APIMATIC 2.0",
            "accept": "application/json"
        }

        # Prepare and invoke the API call request to fetch the response
        response = unirest.get(query_url, headers=headers)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        return response.body

    def get_occurrence_inventories_list_count_by_year(self,
                                                      year):
        """Does a GET request to /occurrence/counts/year.

        Lists occurrence counts by year.

        Args:
            year (string): The 4 digit year. A year of 98 will be interpreted
                as AD 98. Supports range queries.

        Returns:
            mixed: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/occurrence/counts/year"

        # Process optional query parameters
        query_builder = APIHelper.append_url_with_query_parameters(query_builder, {
            "year": year
        })

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {
            "user-agent": "APIMATIC 2.0",
            "accept": "application/json"
        }

        # Prepare and invoke the API call request to fetch the response
        response = unirest.get(query_url, headers=headers)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        return response.body

    def get_occurrence_inventories_list_count_by_dataset(self,
                                                         options=dict()):
        """Does a GET request to /occurrence/counts/datasets.

        Lists occurrence counts for datasets that cover a given taxon or
        country.

        Args:
            options (dict, optional): Key-value pairs for any of the
                parameters to this API Endpoint. All parameters to the
                endpoint are supplied through the dictionary with their names
                being the key and their desired values being the value. A list
                of parameters that can be used are::

                    country -- string -- The 2-letter country code (as per
                        ISO-3166-1) of the country in which the occurrence was
                        recorded.
                    taxon_key -- int -- A taxon key from the GBIF backbone.
                        All included and synonym taxa are included in the
                        search, so a search for aves with taxonKey=212 (i.e.
                        /occurrence/search?taxonKey=212) will match all birds,
                        no matter which species.

        Returns:
            mixed: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/occurrence/counts/datasets"

        # Process optional query parameters
        query_builder = APIHelper.append_url_with_query_parameters(query_builder, {
            "country":  options.get('country', None) if options.get('country', None) is not None else "NZ",
            "taxonKey": options.get('taxon_key', None)
        })

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {
            "user-agent": "APIMATIC 2.0",
            "accept": "application/json"
        }

        # Prepare and invoke the API call request to fetch the response
        response = unirest.get(query_url, headers=headers)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        return response.body

    def get_occurrence_inventories_list_count_by_country(self,
                                                         publishing_country):
        """Does a GET request to /occurrence/counts/countries.

        Lists occurrence counts for all countries covered by the data
        published by the given country.

        Args:
            publishing_country (string): The 2-letter country code (as per
                ISO-3166-1) of the owining organization's country.

        Returns:
            mixed: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/occurrence/counts/countries"

        # Process optional query parameters
        query_builder = APIHelper.append_url_with_query_parameters(query_builder, {
            "publishingCountry": publishing_country
        })

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {
            "user-agent": "APIMATIC 2.0",
            "accept": "application/json"
        }

        # Prepare and invoke the API call request to fetch the response
        response = unirest.get(query_url, headers=headers)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        return response.body

    def get_occurrence_inventories_list_count_by_pub_country(self,
                                                             country):
        """Does a GET request to /occurrence/counts/publishingCountries.

        Lists occurrence counts for all countries that publish data about the
        given country.

        Args:
            country (string): The 2-letter country code (as per ISO-3166-1) of
                the country in which the occurrence was recorded.

        Returns:
            mixed: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/occurrence/counts/publishingCountries"

        # Process optional query parameters
        query_builder = APIHelper.append_url_with_query_parameters(query_builder, {
            "country": country
        })

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {
            "user-agent": "APIMATIC 2.0",
            "accept": "application/json"
        }

        # Prepare and invoke the API call request to fetch the response
        response = unirest.get(query_url, headers=headers)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        return response.body

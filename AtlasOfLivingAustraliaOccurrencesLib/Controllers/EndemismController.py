"""
   AtlasOfLivingAustraliaOccurrencesLib.Controllers.EndemismController

   This file was automatically generated by APIMATIC BETA v2.0 on 10/29/2015
"""
import unirest

from AtlasOfLivingAustraliaOccurrencesLib.APIHelper import APIHelper
from AtlasOfLivingAustraliaOccurrencesLib.Configuration import Configuration
from AtlasOfLivingAustraliaOccurrencesLib.APIException import APIException


class EndemismController(object):


    """A Controller to access Endpoints in the AtlasOfLivingAustraliaOccurrencesLib API."""

    def get_endemic_species_list__csv(self,
                                      options=dict()):
        """Does a GET request to /ws/explore/endemic/species.csv.

        List endemic species within an area

        Args:
            options (dict, optional): Key-value pairs for any of the
                parameters to this API Endpoint. All parameters to the
                endpoint are supplied through the dictionary with their names
                being the key and their desired values being the value. A list
                of parameters that can be used are::

                    facets -- string --   The field on which to based the
                        species list. This can be taxon_concept_lsid or
                        species_guid
                    fq -- string --   Filters to be applied to the original
                        query. These are additional params of the form
                        fq=INDEXEDFIELD:VALUE e.g. fq=kingdom:Fungi. See
                        http://biocache.ala.org.au/ws/index/fields for all the
                        fields that a queryable.
                    q -- string --   The initial query. q=: will query
                        anything, q=macropus will do a free text search for
                        macropus, q=kingdom:Fungi will search for records with
                        a kingdom of Fungi. For a listing of the fields that
                        can be queried in a q=INDEXEDFIELD:VALUE fashion, see
                        /index/fields. This will restrict the records that are
                        considered in then region. For example this could
                        allow people to restrict the service to endemic
                        birds.
                    wkt -- string --   The Well Known Text Area in which to
                        provide the endemic species.

        Returns:
            string: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/ws/explore/endemic/species.csv"

        # Process optional query parameters
        query_builder = APIHelper.append_url_with_query_parameters(query_builder, {
            "facets": options.get('facets', None),
            "fq": options.get('fq', None),
            "q": options.get('q', None),
            "wkt":  options.get('wkt', None) if options.get('wkt', None) is not None else "POLYGON((160 -60,160 -25,180 -25,180 -60,160 -60))"
        })

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {
            "user-agent": "APIMATIC 2.0"
        }

        # Prepare and invoke the API call request to fetch the response
        response = unirest.get(query_url, headers=headers)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        return response.body

    def get_endemic_species_list(self,
                                 options=dict()):
        """Does a GET request to /ws/explore/endemic/species.

        List endemic species within an area

        Args:
            options (dict, optional): Key-value pairs for any of the
                parameters to this API Endpoint. All parameters to the
                endpoint are supplied through the dictionary with their names
                being the key and their desired values being the value. A list
                of parameters that can be used are::

                    facets -- string --   The field on which to based the
                        species list. This can be taxon_concept_lsid or
                        species_guid
                    fq -- string --   Filters to be applied to the original
                        query. These are additional params of the form
                        fq=INDEXEDFIELD:VALUE e.g. fq=kingdom:Fungi. See
                        http://biocache.ala.org.au/ws/index/fields for all the
                        fields that a queryable.
                    q -- string --   The initial query. q=: will query
                        anything, q=macropus will do a free text search for
                        macropus, q=kingdom:Fungi will search for records with
                        a kingdom of Fungi. For a listing of the fields that
                        can be queried in a q=INDEXEDFIELD:VALUE fashion, see
                        /index/fields. This will restrict the records that are
                        considered in then region. For example this could
                        allow people to restrict the service to endemic
                        birds.
                    wkt -- string --   The Well Known Text Area in which to
                        provide the endemic species.

        Returns:
            mixed: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/ws/explore/endemic/species"

        # Process optional query parameters
        query_builder = APIHelper.append_url_with_query_parameters(query_builder, {
            "facets": options.get('facets', None),
            "fq": options.get('fq', None),
            "q": options.get('q', None),
            "wkt":  options.get('wkt', None) if options.get('wkt', None) is not None else "POLYGON((160 -60,160 -25,180 -25,180 -60,160 -60))"
        })

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {
            "user-agent": "APIMATIC 2.0",
            "accept": "application/json"
        }

        # Prepare and invoke the API call request to fetch the response
        response = unirest.get(query_url, headers=headers)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        return response.body

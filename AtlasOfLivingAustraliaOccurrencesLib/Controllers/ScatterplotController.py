"""
   AtlasOfLivingAustraliaOccurrencesLib.Controllers.ScatterplotController

   This file was automatically generated by APIMATIC BETA v2.0 on 10/29/2015
"""
import unirest

from AtlasOfLivingAustraliaOccurrencesLib.APIHelper import APIHelper
from AtlasOfLivingAustraliaOccurrencesLib.Configuration import Configuration
from AtlasOfLivingAustraliaOccurrencesLib.APIException import APIException


class ScatterplotController(object):


    """A Controller to access Endpoints in the AtlasOfLivingAustraliaOccurrencesLib API."""

    def get_scatterplot_image(self,
                              options=dict()):
        """Does a GET request to /ws/scatterplot.

        Return an image for occurrences and two environmental layers as a
        scatterplot.

        Args:
            options (dict, optional): Key-value pairs for any of the
                parameters to this API Endpoint. All parameters to the
                endpoint are supplied through the dictionary with their names
                being the key and their desired values being the value. A list
                of parameters that can be used are::

                    q -- string --   Query of the form field:value e.g.
                        q=genus:Macropus or a free text search e.g.
                        q=Macropus
                    x -- string --   Environmental layer for the X dimension
                        of the scatterplot. See fields at
                        http://biocache.ala.org.au/ws/index/fields with
                        dataType=double.
                    y -- string --   Environmental layer for the Y dimension
                        of the scatterplot. See fields at
                        http://biocache.ala.org.au/ws/index/fields with
                        dataType=double.
                    fq -- list of string --   Filters to be applied to the
                        original query. These are additional params of the
                        form fq=INDEXEDFIELD:VALUE e.g. fq=kingdom:Fungi. See
                        http://bie.ala.org.au/ws/admin/indexFields for all the
                        fields that a queryable.
                    height -- int --   Height of the returned image in pixels.
                        The default value is 256.
                    pointcolour -- string --   Colour of the occurrence
                        points. The default value is 0000FF (blue).
                    pointradius -- string --   Size of occurrence points. The
                        default value is 3.
                    width -- int --   Widith of the returned image in pixels.
                        The default value is 256.

        Returns:
            binary: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/ws/scatterplot"

        # Process optional query parameters
        query_builder = APIHelper.append_url_with_query_parameters(query_builder, {
            "q": options.get('q', None),
            "x": options.get('x', None),
            "y": options.get('y', None),
            "fq": options.get('fq', None),
            "height": options.get('height', None),
            "pointcolour": options.get('pointcolour', None),
            "pointradius": options.get('pointradius', None),
            "width": options.get('width', None)
        })

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {
            "user-agent": "APIMATIC 2.0"
        }

        # Prepare and invoke the API call request to fetch the response
        response = unirest.get(query_url, headers=headers)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        return response.body

    def get_scatterplot_query(self,
                              options=dict()):
        """Does a GET request to /ws/scatterplot/point.json.

        Returns x and y axis co-ordinates corresponding to image pixel points
        (origin top left) for two pointspointx1 pointx2 pointy1 pointy2
        http://biocache.ala.org.au/ws/scatterplot/point.json?q=Macropus%20Agili
        s&x=el874&y=el871&height=512&width=512&pointx1=200&pointy1=200&pointx2=
        500&pointy2=0

        Args:
            options (dict, optional): Key-value pairs for any of the
                parameters to this API Endpoint. All parameters to the
                endpoint are supplied through the dictionary with their names
                being the key and their desired values being the value. A list
                of parameters that can be used are::

                    fq -- list of string --   Filters to be applied to the
                        original query. These are additional params of the
                        form fq=INDEXEDFIELD:VALUE e.g. fq=kingdom:Fungi. See
                        http://bie.ala.org.au/ws/admin/indexFields for all the
                        fields that a queryable.
                    height -- int --   Height of the returned image in pixels.
                        The default value is 256.
                    pointx_1 -- int --   X coordinate for the first
                        scatterplot image pixel. Origin is the top left
                        corner.
                    pointx_2 -- int --   X coordinate for the second
                        scatterplot image pixel. Origin is the top left
                        corner.
                    pointy_1 -- int --   Y coordinate for the first
                        scatterplot image pixel. Origin is the top left
                        corner.
                    pointy_2 -- int --   Y coordinate for the second
                        scatterplot image pixel. Origin is the top left
                        corner.
                    q -- string --   Query of the form field:value e.g.
                        q=genus:Macropus or a free text search e.g.
                        q=Macropus
                    width -- int --   Widith of the returned image in pixels.
                        The default value is 256.
                    x -- string --   Environmental layer for the X dimension
                        of the scatterplot. See fields at
                        http://biocache.ala.org.au/ws/index/fields with
                        dataType=double.
                    y -- string --   Environmental layer for the Y dimension
                        of the scatterplot. See fields at
                        http://biocache.ala.org.au/ws/index/fields with
                        dataType=double.

        Returns:
            mixed: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/ws/scatterplot/point.json"

        # Process optional query parameters
        query_builder = APIHelper.append_url_with_query_parameters(query_builder, {
            "fq": options.get('fq', None),
            "height": options.get('height', None),
            "pointx1": options.get('pointx_1', None),
            "pointx2": options.get('pointx_2', None),
            "pointy1": options.get('pointy_1', None),
            "pointy2": options.get('pointy_2', None),
            "q": options.get('q', None),
            "width": options.get('width', None),
            "x": options.get('x', None),
            "y": options.get('y', None)
        })

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {
            "user-agent": "APIMATIC 2.0",
            "accept": "application/json"
        }

        # Prepare and invoke the API call request to fetch the response
        response = unirest.get(query_url, headers=headers)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        return response.body
